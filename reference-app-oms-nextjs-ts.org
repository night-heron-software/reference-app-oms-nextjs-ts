#+TITLE:  Tempororal OMS Reference App Typescript
#+AUTHOR: Jeff Romine
#+EMAIL:  jromineut@gmail.com
#+DATE:   2025-05-10 Sat
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: ^:{} author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STARTUP: showeverything

* [[https://learn.temporal.io/getting_started/typescript/dev_environment/][Set up a local development environment for Temporal and TypeScript]]

* [[https://learn.temporal.io/getting_started/typescript/hello_world_in_typescript/][Build a Temporal Application from scratch in TypeScript]]

* [[https://learn.temporal.io/tutorials/typescript/build-one-click-order-app-nextjs/][Build a one-click-order application with TypeScript and Next.js]]

** Create Next.js project

#+begin_src shell-script
npx create-next-app@latest reference-app-oms-nextjs-ts
#+end_src

** Node tsconfig

#+begin_src shell-script
npm install --save-dev @tsconfig/node20
#+end_src

** nodemon - for watching for file changes

#+begin_src shell-script
npm install --save-dev nodemon
#+end_src

** temporal packages

#+begin_src shell-script
npm install @temporalio/client @temporalio/worker @temporalio/workflow @temporalio/activity
#+end_src

** temporal directory

#+begin_src shell-script
mkdir -p temporal/src
#+end_src

** temporal/tsconfig.json

#+begin_src json
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "version": "4.4.2",
  "compilerOptions": {
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "rootDir": "./src",
    "outDir": "./lib"
  },
  "include": ["src/**/*.ts"]
}
#+end_src


** npm-run-all

#+begin_src shell-script
npm install npm-run-all --save-dev
#+end_src


** Initial package.json

#+begin_src json
{
  "name": "reference-app-oms-nextjs-ts",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "15.3.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@tsconfig/node20": "^20.1.5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.2",
    "nodemon": "^3.1.10",
    "npm-run-all": "^4.1.5",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
#+end_src

**** Updated package.json

#+begin_src json
{
  "name": "reference-app-oms-nextjs-ts",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "npm-run-all -l build:temporal --parallel dev:temporal dev:next start:worker",
    "dev:next": "next dev",
    "dev:temporal": "tsc --build --watch ./temporal/tsconfig.json",
    "build:next": "next build",
    "build:temporal": "tsc --build ./temporal/tsconfig.json",
    "start:worker": "nodemon ./temporal/lib/worker",
    "start": "next start",
    "lint": "eslint ."
  },
  "dependencies": {
    "next": "15.3.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@tsconfig/node20": "^20.1.5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.2",
    "nodemon": "^3.1.10",
    "npm-run-all": "^4.1.5",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

#+end_src

* [[https://learn.temporal.io/tutorials/typescript/build-one-click-order-app-nextjs/#define-the-business-logic-using-temporal][Define the business logic using Temporal]]

** temporal/src/activities.ts

#+begin_src typescript
import { activityInfo } from '@temporalio/activity';
export async function purchase(id: string): Promise<string> {
  console.log(`Purchased ${id}!`);
  return activityInfo().activityId;
}
#+end_src


** temporal/src/workflows.ts

#+begin_src typescript
import { proxyActivities, sleep } from '@temporalio/workflow';
import type * as activities from './activities';

const { purchase } = proxyActivities<typeof activities>({
  startToCloseTimeout: '1 minute',
});

export async function oneClickBuy(id: string): Promise<string> {
  const result = await purchase(id); // calling the activity
  await sleep('10 seconds'); // sleep to simulate a longer response.
  console.log(`Activity ID: ${result} executed!`);
  return result;
}
#+end_src

#+begin_quote
Workflows must be deterministic, so you perform non-deterministic work
in Activities. The TypeScript SDK bundles Workflow code and runs it
inside a deterministic sandbox. This sandbox can help detect if you're
using nondeterministic code. This is why you must separate Workflow
code from Activity code, and why you have to use the proxyActivities
function to load your Activity functions instead of directly importing
them. The Activities will be nondeterministic, so you can't run in the
same sandbox as the Workflow code.
#+end_quote

** temporal/src/shared.ts

#+begin_src typescript
export const TASK_QUEUE_NAME = 'ecommerce-oneclick';
#+end_src

** temporal/src/worker.ts

#+begin_src typescript
import { NativeConnection, Worker } from '@temporalio/worker';
import * as activities from './activities';
import { TASK_QUEUE_NAME } from './shared';

run().catch((err) => console.log(err));

async function run() {
  const connection = await NativeConnection.connect({
    address: 'localhost:7233',
    // In production, pass options to configure TLS and other settings.
  });
  try {
    const worker = await Worker.create({
      connection,
      workflowsPath: require.resolve('./workflows'),
      activities,
      taskQueue: TASK_QUEUE_NAME
    });
    await worker.run();
  } finally {
    connection.close();
  }
}
#+end_src

*** check that worker builds and runs

#+begin_src shell-script
npm run build:temporal && npm run start:worker`
#+end_src

** temporal/src/client.ts
#+begin_src typescript
import { Client, Connection } from '@temporalio/client';

const client: Client = makeClient();

function makeClient(): Client {
  const connection = Connection.lazy({
    address: 'localhost:7233',
    // In production, pass options to configure TLS and other settings.
  });
  return new Client({ connection });
}

export function getTemporalClient(): Client {
  return client;
}
#+end_src

#+begin_src shell-script
mkdir -p app/api/startBuy
#+end_src

#+begin_src shell-script
mkdir -p app/api/startBuy
touch app/api/startBuy/route.ts
#+end_src

#+begin_src shell-script
curl -d '{"itemId":"1", "transactionId":"abc124"}' \
     -H "Content-Type: application/json" \
     -X POST http://localhost:3000/api/startBuy
#+end_src

* Temporal OMS

** postgres

#+begin_src shell-script
https://www.npmjs.com/package/@vercel/postgres

#+end_src

** Run reference-app-oms-nextjs-ts


#+begin_src shell-script
temporal server start-dev --db-filename local.db
npm-run-all -l build:temporal --parallel dev:temporal dev:next start:worker
#+end_src

#+begin_src json
{
  "_VOLTA_TOOL_RECURSION": "1",
  "TERM_PROGRAM": "vscode",
  "NODE": "/Users/jeffromine/.volta/tools/image/node/23.7.0/bin/node",
  "INIT_CWD": "/Users/jeffromine/src/learning/temporal/reference-app-oms-nextjs-ts",
  "TERM": "xterm-256color",
  "SHELL": "/bin/zsh",
  "BUN_INSPECT": "ws+unix:///var/folders/gy/hn1zsl6563bd9smq7_6c13kc0000gn/T/275csdm3j7r.sock?wait=1",
  "TMPDIR": "/var/folders/gy/hn1zsl6563bd9smq7_6c13kc0000gn/T/",
  "EMACS_PLUGIN_LAUNCHER": "/Users/jeffromine/.oh-my-zsh/plugins/emacs/emacsclient.sh",
  "npm_config_global_prefix": "/Users/jeffromine/.volta/tools/image/node/23.7.0",
  "TERM_PROGRAM_VERSION": "1.100.2",
  "NODE_OPTIONS": " --require \"/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/ms-vscode.js-debug/src/bootloader.js\"  --inspect-publish-uid=http",
  "ZDOTDIR": "/Users/jeffromine",
  "VOLTA_HOME": "/Users/jeffromine/.volta",
  "ORIGINAL_XDG_CURRENT_DESKTOP": "undefined",
  "MallocNanoZone": "0",
  "COLOR": "0",
  "SDKMAN_PLATFORM": "darwinx64",
  "npm_config_noproxy": "",
  "ZSH": "/Users/jeffromine/.oh-my-zsh",
  "PNPM_HOME": "/Users/jeffromine/Library/pnpm",
  "npm_config_local_prefix": "/Users/jeffromine/src/learning/temporal/reference-app-oms-nextjs-ts",
  "USER": "jeffromine",
  "LS_COLORS": "di=1;36:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43",
  "COMMAND_MODE": "unix2003",
  "SDKMAN_CANDIDATES_API": "https://api.sdkman.io/2",
  "npm_config_globalconfig": "/Users/jeffromine/.volta/tools/image/node/23.7.0/etc/npmrc",
  "SSH_AUTH_SOCK": "/private/tmp/com.apple.launchd.2wWLp3FbcI/Listeners",
  "__CF_USER_TEXT_ENCODING": "0x1F5:0x0:0x0",
  "VSCODE_PROFILE_INITIALIZED": "1",
  "npm_execpath": "/Users/jeffromine/.volta/tools/image/npm/11.2.0/bin/npm-cli.js",
  "PAGER": "less",
  "LSCOLORS": "Gxfxcxdxbxegedabagacad",
  "PATH": "/Users/jeffromine/src/learning/temporal/reference-app-oms-nextjs-ts/node_modules/.bin:/Users/jeffromine/src/learning/temporal/node_modules/.bin:/Users/jeffromine/src/learning/node_modules/.bin:/Users/jeffromine/src/node_modules/.bin:/Users/jeffromine/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/jeffromine/.volta/tools/image/npm/11.2.0/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/jeffromine/src/learning/temporal/reference-app-oms-nextjs-ts/node_modules/.bin:/Users/jeffromine/src/learning/temporal/node_modules/.bin:/Users/jeffromine/src/learning/node_modules/.bin:/Users/jeffromine/src/node_modules/.bin:/Users/jeffromine/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/jeffromine/.volta/tools/image/npm/11.2.0/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/jeffromine/.volta/tools/image/npm/11.2.0/bin:/Users/jeffromine/.volta/tools/image/yarn/3.7.0/bin:/Users/jeffromine/.volta/tools/image/node/23.7.0/bin:/Users/jeffromine/.bun/bin:/usr/local/opt/libpq/bin:/Users/jeffromine/google-cloud-sdk/bin:/Users/jeffromine/.volta/bin:/usr/local/opt/postgresql@15/bin:/Library/Frameworks/Python.framework/Versions/3.12/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_11:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/MacGPG2/bin:/usr/local/share/dotnet:~/.dotnet/tools:/usr/local/go/bin:/Users/jeffromine/.bun/bin:/usr/local/opt/libpq/bin:/Users/jeffromine/google-cloud-sdk/bin:/Users/jeffromine/.volta/bin:/Users/jeffromine/Library/pnpm:/usr/local/opt/postgresql@15/bin:/Users/jeffromine/.sdkman/candidates/maven/current/bin:/Users/jeffromine/.sdkman/candidates/java/current/bin:/Library/Frameworks/Python.framework/Versions/3.12/bin:/Applications/Visual Studio Code.app/Contents/Resources/app/bin:/Users/jeffromine/Library/Application Support/Code/User/globalStorage/github.copilot-chat/debugCommand:/Applications/Visual Studio Code.app/Contents/Resources/app/bin",
  "MAVEN_HOME": "/Users/jeffromine/.sdkman/candidates/maven/current",
  "VSCODE_INSPECTOR_OPTIONS": "{\"inspectorIpc\":\"/var/folders/gy/hn1zsl6563bd9smq7_6c13kc0000gn/T/node-cdp.2251-5569e633-1.sock\",\"deferredMode\":false,\"waitForDebugger\":\"\",\"execPath\":\"/Users/jeffromine/.volta/bin/node\",\"onlyEntrypoint\":false,\"autoAttachMode\":\"always\",\"openerId\":\"d1fe98a029b8fa93fe7b1c87\"}",
  "_": "/Users/jeffromine/.volta/tools/image/node/23.7.0/bin/node",
  "npm_package_json": "/Users/jeffromine/src/learning/temporal/reference-app-oms-nextjs-ts/package.json",
  "__CFBundleIdentifier": "com.microsoft.VSCode",
  "USER_ZDOTDIR": "/Users/jeffromine",
  "npm_config_init_module": "/Users/jeffromine/.npm-init.js",
  "npm_config_userconfig": "/Users/jeffromine/.npmrc",
  "PWD": "/Users/jeffromine/src/learning/temporal/reference-app-oms-nextjs-ts",
  "npm_command": "run-script",
  "JAVA_HOME": "/Users/jeffromine/.sdkman/candidates/java/current",
  "EDITOR": "/Users/jeffromine/.oh-my-zsh/plugins/emacs/emacsclient.sh",
  "npm_lifecycle_event": "start:worker",
  "LANG": "en_US.UTF-8",
  "npm_package_name": "reference-app-oms-nextjs-ts",
  "CLOUDSDK_PYTHON": "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3",
  "BUN_INSPECT_NOTIFY": "unix:///var/folders/gy/hn1zsl6563bd9smq7_6c13kc0000gn/T/3v28nec4szw.sock",
  "XPC_FLAGS": "0x0",
  "VSCODE_GIT_ASKPASS_EXTRA_ARGS": "",
  "BUN_INSPECT_CONNECT_TO": "unix:///var/folders/gy/hn1zsl6563bd9smq7_6c13kc0000gn/T/v9sl6xkcp9.sock",
  "npm_config_npm_version": "11.2.0",
  "npm_config_node_gyp": "/Users/jeffromine/.volta/tools/image/npm/11.2.0/node_modules/node-gyp/bin/node-gyp.js",
  "XPC_SERVICE_NAME": "0",
  "npm_package_version": "0.1.0",
  "VSCODE_INJECTION": "1",
  "SHLVL": "4",
  "HOME": "/Users/jeffromine",
  "VSCODE_GIT_ASKPASS_MAIN": "/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js",
  "LOGNAME": "jeffromine",
  "LESS": "-R",
  "npm_config_cache": "/Users/jeffromine/.npm",
  "SDKMAN_DIR": "/Users/jeffromine/.sdkman",
  "npm_lifecycle_script": "node  --watch --env-file=.env.local ./temporal/lib/worker",
  "VSCODE_GIT_IPC_HANDLE": "/var/folders/gy/hn1zsl6563bd9smq7_6c13kc0000gn/T/vscode-git-ae55786291.sock",
  "BUN_INSTALL": "/Users/jeffromine/.bun",
  "npm_config_user_agent": "npm/11.2.0 node/v23.7.0 darwin x64 workspaces/false",
  "VSCODE_GIT_ASKPASS_NODE": "/Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper (Plugin).app/Contents/MacOS/Code Helper (Plugin)",
  "SDKMAN_CANDIDATES_DIR": "/Users/jeffromine/.sdkman/candidates",
  "GIT_ASKPASS": "/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh",
  "COLORTERM": "truecolor",
  "npm_config_prefix": "/Users/jeffromine/.volta/tools/image/node/23.7.0",
  "npm_node_execpath": "/Users/jeffromine/.volta/tools/image/node/23.7.0/bin/node",
  "WATCH_REPORT_DEPENDENCIES": "1",
  "DATABASE_URL": "postgres://default:LFrOHQ8iBRh9@ep-muddy-band-a4dr8n83-pooler.us-east-1.aws.neon.tech/verceldb?sslmode=require",
  "DATABASE_URL_UNPOOLED": "postgresql://default:LFrOHQ8iBRh9@ep-muddy-band-a4dr8n83.us-east-1.aws.neon.tech/verceldb?sslmode=require",
  "PGDATABASE": "verceldb",
  "PGHOST": "ep-muddy-band-a4dr8n83-pooler.us-east-1.aws.neon.tech",
  "PGHOST_UNPOOLED": "ep-muddy-band-a4dr8n83.us-east-1.aws.neon.tech",
  "PGPASSWORD": "LFrOHQ8iBRh9",
  "PGUSER": "default",
  "POSTGRES_DATABASE": "verceldb",
  "POSTGRES_HOST": "ep-muddy-band-a4dr8n83-pooler.us-east-1.aws.neon.tech",
  "POSTGRES_PASSWORD": "LFrOHQ8iBRh9",
  "POSTGRES_PRISMA_URL": "postgres://default:LFrOHQ8iBRh9@ep-muddy-band-a4dr8n83-pooler.us-east-1.aws.neon.tech/verceldb?pgbouncer=true&connect_timeout=15&sslmode=require",
  "POSTGRES_URL": "postgres://default:LFrOHQ8iBRh9@ep-muddy-band-a4dr8n83-pooler.us-east-1.aws.neon.tech/verceldb?sslmode=require",
  "POSTGRES_URL_NON_POOLING": "postgres://default:LFrOHQ8iBRh9@ep-muddy-band-a4dr8n83.us-east-1.aws.neon.tech/verceldb?sslmode=require",
  "POSTGRES_URL_NO_SSL": "postgres://default:LFrOHQ8iBRh9@ep-muddy-band-a4dr8n83-pooler.us-east-1.aws.neon.tech/verceldb",
  "POSTGRES_USER": "default",
  "VERCEL_ENV": "development"
}
#+end_src

#+begin_quote

Temporal's Go SDK and TypeScript SDK offer similar functionalities,
but they are tailored to their respective languages'
ecosystems. Here's a breakdown of their equivalents:

- Core Concepts
  - Workflows: Both SDKs allow you to define long-running processes as
    workflows.
  - Activities: Both allow you to define short-lived tasks as
    activities. These are used for operations that can fail or are not
    deterministic.
  - Workers: Both SDKs use workers to execute workflows and
    activities.
  - Client: Both provide a client to interact with the Temporal
    service.

- Go SDK Equivalents in TypeScript SDK
  - time.Now() in Go is replaced by workflow.now() in TypeScript.
  - time.Sleep() in Go is replaced by workflow.sleep() in TypeScript.
  - workflow.Go() in Go is replaced by workflow.startChild() in
    TypeScript.
  - Go's chan is replaced by workflow.channel in TypeScript.
  - Go's select is replaced by workflow.selector in TypeScript.
  - Go's context.Context is replaced by workflow.context in
    TypeScript.
  - Go's slog logging is replaced by workflow.getLogger() in
    TypeScript.
  - Key Differences
  - Deterministic Execution: The TypeScript SDK enforces a
    deterministic execution environment for workflows, meaning that
    external state access and side effects must be done through
    activities.
  - Node.js and DOM APIs: In TypeScript, workflows cannot directly
    import Node.js or DOM APIs.
  - Testing: Both SDKs offer testing frameworks for workflows and
    activities.
  - Language Idioms: Each SDK is designed to align with the idiomatic
    practices of its respective language.
  - Workflow Updates: Both SDKs support workflow updates, allowing
    modifications to running workflows.
  - TypeScript SDK Packages

- The TypeScript SDK is structured into several packages:
  - @temporalio/client: For interacting with the Temporal service.
  - @temporalio/worker: For running workflow and activity workers.
  - @temporalio/workflow: For defining workflows.
  - @temporalio/activity: For defining activities.
  - @temporalio/testing: For testing workflows and activities.


In summary, while both SDKs offer similar core functionality, their
implementation details and idiomatic usage differ to fit the Go and
TypeScript ecosystems. The TypeScript SDK emphasizes deterministic
workflow execution, while the Go SDK leverages Go's concurrency
primitives.
#+end_quote

#+begin_example
Argument of type '{ id: string; orderId: string; productId: string; quantity: number; status: ShipmentStatus; createdAt: Date; updatedAt: Date; }' is not assignable to parameter of type 'Omit<Shipment, "createdAt" | "updatedAt" | "status"> & { status: "PENDING"; createdAt: Date; updatedAt: Date; }'.
  Type '{ id: string; orderId: string; productId: string; quantity: number; status: ShipmentStatus; createdAt: Date; updatedAt: Date; }' is not assignable to type '{ status: "PENDING"; createdAt: Date; updatedAt: Date; }'.
    Types of property 'status' are incompatible.
      Type 'ShipmentStatus' is not assignable to type '"PENDING"'.
        Type '"SHIPPED"' is not assignable to type '"PENDING"'.ts(2345)
#+end_example

#+begin_src json
{
  id: string;
  orderId: string;
  productId: string;
  quantity: number;
  status: ShipmentStatus;
  createdAt: Date;
  updatedAt: Date;
}

Omit<Shipment, "createdAt" | "updatedAt" | "status"> &

{
  status: "PENDING";
  createdAt: Date;
  updatedAt: Date;
}

{
  id: string; // Corresponds to ShipmentID in Go
  orderId: string;
  productId: string;
  quantity: number;
  status: ShipmentStatus;
  createdAt: Date; // Mapped from Go's time.Time
  updatedAt: Date; // Mapped from Go's time.Time
}
#+end_src

#+begin_src shell-script
temporal workflow signal \
         --workflow-id 'A1-1749674719128' \
         --name 'ShipmentStatusUpdated' \
         --input '{"shipmentId": "A1-1749674719128", "status": "shipped", "updatedAt": "2025-06-11T20:57:07.939Z"}'
#+end_src


* Walkthrough Notes

**


#+begin_src shell-script
temporal workflow signal \
         --workflow-id 'ship-A1-1750460272989:1' \
         --name 'ShipmentCarrierUpdateSignalName' \
         --input '{"status":"delivered"}'

#+end_src

#+begin_src shell-script
temporal workflow signal \
         --workflow-id 'ship-A2-1750468019881:1' \
         --name 'ShipmentCarrierUpdateSignalName' \
         --input '{"status":"delivered"}'
#+end_src

#+begin_src shell-script
temporal workflow signal \
         --workflow-id 'ship-A2-1750468019881:2' \
         --name 'ShipmentCarrierUpdateSignalName' \
         --input '{"status":"delivered"}'
#+end_src

#+begin_src html
<script lang="ts">
  import Card from '$lib/components/Card.svelte';
  import Button from '$lib/components/Button.svelte';
  import Heading from '$lib/components/Heading.svelte';
  import ItemDetails from '$lib/components/ItemDetails.svelte';
  import ShipmentProgress from '$lib/components/ShipmentProgress.svelte';
  import type { Shipment } from '$lib/types/order';

  let { data } = $props();
  let shipment: Shipment = $derived(data.shipment);
  let status = $derived(shipment?.status);
  let broadcaster: BroadcastChannel;

  $effect(() => {
  if (shipment?.id && !broadcaster) {
  broadcaster = new BroadcastChannel(`shipment-${shipment.id}`);
  broadcaster?.addEventListener('message', (event) => {
  status = event.data;
  });
  }
  });

  const dispatchShipment = async (shipment: Shipment) => {
  const signal = { name: 'ShipmentUpdate', status: 'dispatched' };
  await fetch('/api/shipment', { method: 'POST', body: JSON.stringify({ shipment, signal }) });
  status = 'dispatched';
  broadcaster?.postMessage(status);
  };

  const deliverShipment = async (shipment: Shipment) => {
  const signal = { name: 'ShipmentUpdate', status: 'delivered' };
  await fetch('/api/shipment', { method: 'POST', body: JSON.stringify({ shipment, signal }) });
  status = 'delivered';
  broadcaster?.postMessage(status);
  };
</script>

<Card>
  <div class="w-full flex flex-col gap-2">
    <div class="flex flex-col md:flex-row items-center justify-between gap-2 w-full">
      <Heading>{shipment.id}</Heading>
      <ShipmentProgress {status} />
    </div>
    <ItemDetails items={shipment.items} />
  </div>
  {#snippet actionButtons()}
  <Button disabled={status !== 'booked'} onClick={() => dispatchShipment(shipment)}>
    Dispatch
  </Button>
  <Button disabled={status !== 'dispatched'} onClick={() => deliverShipment(shipment)}>
    Deliver
  </Button>
  {/snippet}
</Card>

#+end_src
#+begin_example

#+end_example
