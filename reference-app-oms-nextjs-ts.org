#+TITLE:  Tempororal OMS Reference App Typescript
#+AUTHOR: Jeff Romine
#+EMAIL:  jromineut@gmail.com
#+DATE:   2025-05-10 Sat
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: ^:{} author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STARTUP: showeverything

* [[https://learn.temporal.io/getting_started/typescript/dev_environment/][Set up a local development environment for Temporal and TypeScript]]

* [[https://learn.temporal.io/getting_started/typescript/hello_world_in_typescript/][Build a Temporal Application from scratch in TypeScript]]

* [[https://learn.temporal.io/tutorials/typescript/build-one-click-order-app-nextjs/][Build a one-click-order application with TypeScript and Next.js]]

** Create Next.js project

#+begin_src shell-script
npx create-next-app@latest reference-app-oms-nextjs-ts
#+end_src

** Node tsconfig

#+begin_src shell-script
npm install --save-dev @tsconfig/node20
#+end_src

** nodemon - for watching for file changes

#+begin_src shell-script
npm install --save-dev nodemon
#+end_src

** temporal packages

#+begin_src shell-script
npm install @temporalio/client @temporalio/worker @temporalio/workflow @temporalio/activity
#+end_src

** temporal directory

#+begin_src shell-script
mkdir -p temporal/src
#+end_src

** temporal/tsconfig.json

#+begin_src json
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "version": "4.4.2",
  "compilerOptions": {
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "rootDir": "./src",
    "outDir": "./lib"
  },
  "include": ["src/**/*.ts"]
}
#+end_src


** npm-run-all

#+begin_src shell-script
npm install npm-run-all --save-dev
#+end_src


** Initial package.json

#+begin_src json
{
  "name": "reference-app-oms-nextjs-ts",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "15.3.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@tsconfig/node20": "^20.1.5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.2",
    "nodemon": "^3.1.10",
    "npm-run-all": "^4.1.5",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
#+end_src

**** Updated package.json

#+begin_src json
{
  "name": "reference-app-oms-nextjs-ts",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "npm-run-all -l build:temporal --parallel dev:temporal dev:next start:worker",
    "dev:next": "next dev",
    "dev:temporal": "tsc --build --watch ./temporal/tsconfig.json",
    "build:next": "next build",
    "build:temporal": "tsc --build ./temporal/tsconfig.json",
    "start:worker": "nodemon ./temporal/lib/worker",
    "start": "next start",
    "lint": "eslint ."
  },
  "dependencies": {
    "next": "15.3.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@tsconfig/node20": "^20.1.5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.2",
    "nodemon": "^3.1.10",
    "npm-run-all": "^4.1.5",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

#+end_src

* [[https://learn.temporal.io/tutorials/typescript/build-one-click-order-app-nextjs/#define-the-business-logic-using-temporal][Define the business logic using Temporal]]

** temporal/src/activities.ts

#+begin_src typescript
import { activityInfo } from '@temporalio/activity';
export async function purchase(id: string): Promise<string> {
  console.log(`Purchased ${id}!`);
  return activityInfo().activityId;
}
#+end_src


** temporal/src/workflows.ts

#+begin_src typescript
import { proxyActivities, sleep } from '@temporalio/workflow';
import type * as activities from './activities';

const { purchase } = proxyActivities<typeof activities>({
  startToCloseTimeout: '1 minute',
});

export async function oneClickBuy(id: string): Promise<string> {
  const result = await purchase(id); // calling the activity
  await sleep('10 seconds'); // sleep to simulate a longer response.
  console.log(`Activity ID: ${result} executed!`);
  return result;
}
#+end_src

#+begin_quote
Workflows must be deterministic, so you perform non-deterministic work
in Activities. The TypeScript SDK bundles Workflow code and runs it
inside a deterministic sandbox. This sandbox can help detect if you're
using nondeterministic code. This is why you must separate Workflow
code from Activity code, and why you have to use the proxyActivities
function to load your Activity functions instead of directly importing
them. The Activities will be nondeterministic, so you can't run in the
same sandbox as the Workflow code.
#+end_quote

** temporal/src/shared.ts

#+begin_src typescript
export const TASK_QUEUE_NAME = 'ecommerce-oneclick';
#+end_src

** temporal/src/worker.ts

#+begin_src typescript
import { NativeConnection, Worker } from '@temporalio/worker';
import * as activities from './activities';
import { TASK_QUEUE_NAME } from './shared';

run().catch((err) => console.log(err));

async function run() {
  const connection = await NativeConnection.connect({
    address: 'localhost:7233',
    // In production, pass options to configure TLS and other settings.
  });
  try {
    const worker = await Worker.create({
      connection,
      workflowsPath: require.resolve('./workflows'),
      activities,
      taskQueue: TASK_QUEUE_NAME
    });
    await worker.run();
  } finally {
    connection.close();
  }
}
#+end_src

*** check that worker builds and runs

#+begin_src shell-script
npm run build:temporal && npm run start:worker`
#+end_src

** temporal/src/client.ts
#+begin_src typescript
import { Client, Connection } from '@temporalio/client';

const client: Client = makeClient();

function makeClient(): Client {
  const connection = Connection.lazy({
    address: 'localhost:7233',
    // In production, pass options to configure TLS and other settings.
  });
  return new Client({ connection });
}

export function getTemporalClient(): Client {
  return client;
}
#+end_src

#+begin_src shell-script
mkdir -p app/api/startBuy
#+end_src

#+begin_src shell-script
mkdir -p app/api/startBuy
touch app/api/startBuy/route.ts
#+end_src

#+begin_src shell-script
curl -d '{"itemId":"1", "transactionId":"abc124"}' \
     -H "Content-Type: application/json" \
     -X POST http://localhost:3000/api/startBuy
#+end_src

* Temporal OMS

** postgres

#+begin_src shell-script
https://www.npmjs.com/package/@vercel/postgres

#+end_src
